{"version":3,"sources":["dist/node_modules/browser-pack/_prelude.js","dist/src/unnotify.js"],"names":["f","exports","module","define","amd","window","global","self","this","unnotify","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","notificationCenter","__esModule","notificationCenterClassName","eachNotificationClassName","notificationButtonClassName","defaultTimeout","__unnotifyCreateStyleSheet","localNotificationCenterClassName","localEachNotificationClassName","side","clickable","notificationCenterStyle","document","createElement","type","innerHTML","localNotificationButtonClassName","pointerEvents","__unnotifyReturnClasses","getElementsByTagName","appendChild","classList","add","body","insertBefore","firstChild","__unnotifyDiv","options","div","id","Math","random","toString","substring","customClass","animateIn","setAttribute","animateOut","__unnotifyCloseButton","closeButtonClass","closeButton","innerText","__unnotifyActionButton","text","btn","__unnotifyContent","content","contentDiv","__unnotifyShow","title","titleDiv","titleSpan","style","fontWeight","fontSize","__unnotifyTitle","addEventListener","destroy","timeout","setTimeout","__setupDestroyEventHandlers","__unnotifyConfirm","confirmButtonName","cancelButtonName","onConfirmCallback","onCancelCallback","confirmButton","cancelButton","undefined","evt","__unnotifyDestroy","div_1","getElementById","getAttribute","contains","remove","parentNode","removeChild","init","show","confirm","affirm","Unnotify","prototype"],"mappings":"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","file":"unnotify.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\r\nexports.__esModule = true;\r\nvar notificationCenter;\r\nvar notificationCenterClassName = \"unnotify-center\";\r\nvar eachNotificationClassName = \"unnotify-panel\";\r\nvar notificationButtonClassName = \"unnotify-button\";\r\nvar defaultTimeout = 5000;\r\n/**Creates and appends the stylesheet to the document */\r\nfunction __unnotifyCreateStyleSheet(localNotificationCenterClassName, localEachNotificationClassName, notificationButtonClassName, side, clickable) {\r\n    if (side === undefined || side === null) {\r\n        side = \"right\";\r\n    }\r\n    else if (side === 'left') {\r\n        side = 'left';\r\n    }\r\n    else {\r\n        side = 'right';\r\n    }\r\n    var notificationCenterStyle = document.createElement(\"style\");\r\n    notificationCenterStyle.type = \"text/css\";\r\n    notificationCenterStyle.innerHTML = __unnotifyReturnClasses(localNotificationCenterClassName, localEachNotificationClassName, notificationButtonClassName, side, clickable);\r\n    document.getElementsByTagName('head')[0].appendChild(notificationCenterStyle);\r\n    // Create the notification center\r\n    notificationCenter = document.createElement(\"div\");\r\n    notificationCenter.classList.add(localNotificationCenterClassName);\r\n    // document.body.appendChild(notificationCenter);\r\n    document.body.insertBefore(notificationCenter, document.body.firstChild);\r\n}\r\n/**Returns the required classes */\r\nfunction __unnotifyReturnClasses(localNotificationCenterClassName, localEachNotificationClassName, localNotificationButtonClassName, side, clickable) {\r\n    var pointerEvents = \"initial\";\r\n    if (!clickable) {\r\n        pointerEvents = \"none\";\r\n    }\r\n    return \"\\n        .\" + localNotificationCenterClassName + \" {\\n            position: absolute;\\n            top: 20px;\\n            z-index: 25000;\\n            overflow-y: auto;\\n            overflow-x: hidden;\\n            pointer-events: \" + pointerEvents + \";\\n        }\\n\\n        .\" + localEachNotificationClassName + \" {\\n            padding: 10px;\\n            margin: 10px;\\n            border-radius: 5px;\\n            color: #fff;\\n            width: 350px;\\n            min-height: 40px;\\n            position: static;\\n            top: 30px;\\n            z-index: 25100;\\n            pointer-events: \" + pointerEvents + \";\\n        }\\n\\n        .\" + localNotificationButtonClassName + \" {\\n            float: right;\\n            position: relative;\\n            top: -7px;\\n            right: -10px;\\n            background-color: transparent;\\n            border: none;\\n            pointer-events: initial;\\n        }\\n\\n        .unnotify-close-btn {\\n            color: #fff;\\n            cursor: pointer;\\n        }\\n\\n        .unnotify-action-btn {\\n            width: 50%;\\n            color: #fff;\\n            text-align: center;\\n            padding: 5px 0px;\\n            margin-top: 10px;\\n            border: none;\\n            cursor: pointer;\\n            background-color: rgba(0, 0, 0, 0);\\n            outline: none;\\n        }\\n\\n        .unnotify-action-btn:hover {\\n            background-color: rgba(0, 0, 0, 0.1);\\n            outline: none;\\n        }\\n\\n        .unnotify-success {\\n            background-color: rgba(27, 94, 32, 0.8);\\n        }\\n\\n        .unnotify-info {\\n            background-color: rgba(29, 121, 198, 0.8);\\n        }\\n\\n        .unnotify-warning {\\n            background-color: rgba(251, 114, 4, 0.8);\\n        }\\n\\n        .unnotify-danger {\\n            background-color: rgba(213, 0, 0, 0.8);\\n        }\\n\\n        /* Custom, iPhone Retina */ \\n        @media only screen and (min-width : 320px) {\\n            .\" + localNotificationCenterClassName + \" {\\n                margin: 0px 2px;\\n                padding: 0px 2px;\\n            }\\n\\n            .\" + localEachNotificationClassName + \" {\\n                width: 300px;\\n            }\\n        }\\n    \\n        /* Extra Small Devices, Phones */ \\n        @media only screen and (min-width : 480px) {\\n            .\" + localNotificationCenterClassName + \" {\\n                width: 360px;\\n                \" + side + \": 0px;\\n                padding: 0px 10px;\\n                margin: 0px 20px;\\n            }\\n\\n            .\" + localEachNotificationClassName + \" {\\n                width: 90%;\\n            }\\n        }\\n    \\n        /* Small Devices, Tablets */\\n        @media only screen and (min-width : 768px) {\\n            .\" + localNotificationCenterClassName + \" {\\n                width: 360px;\\n                \" + side + \": 0px;\\n                padding: 0px 10px;\\n                margin: 0px 20px;\\n            }\\n\\n            .\" + localEachNotificationClassName + \" {\\n                width: 90%;\\n            }\\n        }\\n    \";\r\n}\r\n/**Returns the Div Element that houses the notification */\r\nfunction __unnotifyDiv(eachNotificationClassName, options) {\r\n    var div = document.createElement(\"div\");\r\n    div.id = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n    div.classList.add(eachNotificationClassName);\r\n    if (options.type == \"success\" || options.type == \"info\" || options.type == \"danger\" || options.type == \"warning\") {\r\n        div.classList.add(\"unnotify-\" + options.type);\r\n    }\r\n    else if (typeof (options.customClass) != \"undefined\" || typeof (options.customClass) != null || options.customClass != \"\") {\r\n        div.classList.add(options.customClass);\r\n    }\r\n    if (typeof (options.animateIn) != \"undefined\") {\r\n        div.classList.add(\"animated\");\r\n        div.classList.add(options.animateIn);\r\n        div.setAttribute(\"data-animate-in\", options.animateIn);\r\n    }\r\n    else {\r\n        div.setAttribute(\"data-animate-in\", \"\");\r\n    }\r\n    if (typeof (options.animateOut) != \"undefined\") {\r\n        div.setAttribute(\"data-animate-out\", options.animateOut);\r\n    }\r\n    else {\r\n        div.setAttribute(\"data-animate-out\", \"\");\r\n    }\r\n    return div;\r\n}\r\n/**Returns the title div */\r\nfunction __unnotifyTitle(title) {\r\n    var titleDiv = document.createElement(\"div\");\r\n    var titleSpan = document.createElement(\"span\");\r\n    titleSpan.style.fontWeight = \"700\";\r\n    titleSpan.style.fontSize = \"1.6rem\";\r\n    titleSpan.innerText = title;\r\n    titleDiv.appendChild(titleSpan);\r\n    return titleDiv;\r\n}\r\n/**Returns the button which would close the notification */\r\nfunction __unnotifyCloseButton(closeButtonClass) {\r\n    var closeButton = document.createElement(\"button\");\r\n    closeButton.classList.add(closeButtonClass);\r\n    closeButton.classList.add(\"unnotify-close-btn\");\r\n    closeButton.innerText = \"x\";\r\n    return closeButton;\r\n}\r\nfunction __unnotifyActionButton(text) {\r\n    var btn = document.createElement(\"button\");\r\n    btn.classList.add(\"unnotify-action-btn\");\r\n    btn.innerText = text;\r\n    return btn;\r\n}\r\n/**Returns the div that displays the content of the notification */\r\nfunction __unnotifyContent(content) {\r\n    var contentDiv = document.createElement(\"div\");\r\n    contentDiv.innerHTML = content;\r\n    return contentDiv;\r\n}\r\nfunction __setupDestroyEventHandlers(div, options) {\r\n    // If timeout is 0, then don't autodestroy it\r\n    if (typeof (options.timeout) == \"undefined\" || typeof (options.timeout) == null || options.timeout < 0) {\r\n        setTimeout(function () {\r\n            destroy(div.id);\r\n        }, defaultTimeout);\r\n    }\r\n    else if (options.timeout > 0) {\r\n        setTimeout(function () {\r\n            destroy(div.id);\r\n        }, options.timeout);\r\n    }\r\n}\r\n/**Internal function to display the notification */\r\nfunction __unnotifyShow(eachNotificationClassName, notificationButtonClassName, title, content, options) {\r\n    var div = __unnotifyDiv(eachNotificationClassName, options);\r\n    var titleDiv = __unnotifyTitle(title);\r\n    var closeButton = __unnotifyCloseButton(notificationButtonClassName);\r\n    titleDiv.appendChild(closeButton);\r\n    closeButton.addEventListener('click', function () {\r\n        destroy(div.id);\r\n    });\r\n    var contentDiv = __unnotifyContent(content);\r\n    div.appendChild(titleDiv);\r\n    div.appendChild(contentDiv);\r\n    __setupDestroyEventHandlers(div, options);\r\n    notificationCenter.appendChild(div);\r\n    return div.id;\r\n}\r\n/**Internal function to display a confirmation notification */\r\nfunction __unnotifyConfirm(eachNotificationClassName, notificationButtonClassName, content, options, confirmButtonName, cancelButtonName, onConfirmCallback, onCancelCallback) {\r\n    var div = __unnotifyDiv(eachNotificationClassName, options);\r\n    var closeButton = __unnotifyCloseButton(notificationButtonClassName);\r\n    closeButton.addEventListener('click', function () {\r\n        destroy(div.id);\r\n    });\r\n    var contentDiv = __unnotifyContent(content);\r\n    var confirmButton = __unnotifyActionButton(confirmButtonName);\r\n    var cancelButton = __unnotifyActionButton(cancelButtonName);\r\n    div.appendChild(closeButton);\r\n    div.appendChild(contentDiv);\r\n    div.appendChild(confirmButton);\r\n    div.appendChild(cancelButton);\r\n    if (onConfirmCallback != undefined && onConfirmCallback != null) {\r\n        confirmButton.addEventListener('click', function (evt) {\r\n            onConfirmCallback(evt, div.id);\r\n        });\r\n    }\r\n    if (onCancelCallback != undefined && onCancelCallback != null) {\r\n        cancelButton.addEventListener('click', function (evt) {\r\n            onCancelCallback(evt, div.id);\r\n        });\r\n    }\r\n    notificationCenter.appendChild(div);\r\n    return div.id;\r\n}\r\nfunction __unnotifyDestroy(id) {\r\n    try {\r\n        var div_1 = document.getElementById(id);\r\n        // Apply the animate-out class\r\n        var animateOut = div_1.getAttribute(\"data-animate-out\");\r\n        var animateIn = div_1.getAttribute(\"data-animate-in\");\r\n        if (animateOut.length != 0) {\r\n            if (!div_1.classList.contains(\"animated\")) {\r\n                div_1.classList.add(\"animated\");\r\n            }\r\n            if (animateIn.length != 0) {\r\n                div_1.classList.remove(animateIn);\r\n            }\r\n            div_1.classList.add(animateOut);\r\n            setTimeout(function () {\r\n                div_1.parentNode.removeChild(div_1);\r\n            }, 1000);\r\n        }\r\n        else {\r\n            div_1.parentNode.removeChild(div_1);\r\n        }\r\n    }\r\n    catch (e) { }\r\n}\r\n/**Initialises the notification module */\r\nfunction init(side, clickable) {\r\n    __unnotifyCreateStyleSheet(notificationCenterClassName, eachNotificationClassName, notificationButtonClassName, side, clickable);\r\n}\r\nexports.init = init;\r\n/**Displays the notification and returns the ID of the notification element. Title is a string, content can either be a string or HTML. */\r\nfunction show(title, content, options) {\r\n    return __unnotifyShow(eachNotificationClassName, notificationButtonClassName, title, content, options);\r\n}\r\nexports.show = show;\r\n/**Shows a confirmation notification (with two options: Confirm and Cancel) and accepts a confirmation callback (executed if the user confirms)\r\n     * and an optional on-cancel callback (executed if the user cancels) and returns the ID of the notification */\r\nfunction confirm(content, options, onConfirmCallback, onCancelCallback) {\r\n    return __unnotifyConfirm(this.localEachNotificationClassName, notificationButtonClassName, content, options, \"Confirm\", \"Cancel\", onConfirmCallback, onCancelCallback);\r\n}\r\nexports.confirm = confirm;\r\n/**Shows a confirmation notification (with two options: Yes and No) and accepts a confirmation callback (executed if the user clicks on Yes)\r\n    * and an optional callback that is executed if the user clicks on No, and returns the ID of the notification */\r\nfunction affirm(content, options, onConfirmCallback, onCancelCallback) {\r\n    return __unnotifyConfirm(this.localEachNotificationClassName, notificationButtonClassName, content, options, \"Yes\", \"No\", onConfirmCallback, onCancelCallback);\r\n}\r\nexports.affirm = affirm;\r\n/**Destroys the notification with the associated ID */\r\nfunction destroy(id) {\r\n    __unnotifyDestroy(id);\r\n}\r\nexports.destroy = destroy;\r\n/**Class that can display the notifications */\r\nvar Unnotify = /** @class */ (function () {\r\n    /**Initialises everything. Accepts the side, whose dafault is right. Possible values are 'right', 'left' */\r\n    function Unnotify(side, clickable) {\r\n        this.localNotificationCenterClassName = notificationCenterClassName + \"-\" + side;\r\n        this.localEachNotificationClassName = eachNotificationClassName + \"-\" + side;\r\n        // Create the CSS rules required for the notification center\r\n        __unnotifyCreateStyleSheet(this.localNotificationCenterClassName, this.localEachNotificationClassName, notificationButtonClassName, side, clickable);\r\n    }\r\n    /**Displays the notification and returns the ID of the notification element. Title is a string, content can either be a string or HTML. */\r\n    Unnotify.prototype.show = function (title, content, options) {\r\n        return __unnotifyShow(this.localEachNotificationClassName, notificationButtonClassName, title, content, options);\r\n    };\r\n    /**Shows a confirmation notification and accepts a confirmation callback (executed if the user confirms)\r\n     * and an optional on-cancel callback (executed if the user cancels) and returns the ID of the notification */\r\n    Unnotify.prototype.confirm = function (content, options, onConfirmCallback, onCancelCallback) {\r\n        return __unnotifyConfirm(this.localEachNotificationClassName, notificationButtonClassName, content, options, \"Confirm\", \"Cancel\", onConfirmCallback, onCancelCallback);\r\n    };\r\n    /**Shows a confirmation notification (with two options: Yes and No) and accepts a confirmation callback (executed if the user clicks on Yes)\r\n    * and an optional callback that is executed if the user clicks on No, and returns the ID of the notification */\r\n    Unnotify.prototype.affirm = function (content, options, onConfirmCallback, onCancelCallback) {\r\n        return __unnotifyConfirm(this.localEachNotificationClassName, notificationButtonClassName, content, options, \"Yes\", \"No\", onConfirmCallback, onCancelCallback);\r\n    };\r\n    /**Destroys the notification with the associated ID */\r\n    Unnotify.prototype.destroy = function (id) {\r\n        __unnotifyDestroy(id);\r\n    };\r\n    return Unnotify;\r\n}());\r\nexports.Unnotify = Unnotify;\r\n"]}