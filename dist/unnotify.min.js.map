{"version":3,"sources":["dist/node_modules/browser-pack/_prelude.js","dist/src/unnotify.js"],"names":["f","exports","module","define","amd","window","global","self","this","unnotify","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","__unnotifyCreateStyleSheet","localNotificationCenterClassName","localEachNotificationClassName","notificationButtonClassName","side","clickable","undefined","notificationCenterStyle","document","createElement","type","innerHTML","localNotificationButtonClassName","pointerEvents","__unnotifyReturnClasses","getElementsByTagName","appendChild","notificationCenter","classList","add","body","insertBefore","firstChild","__unnotifyShow","eachNotificationClassName","title","content","options","div","id","Math","random","toString","substring","customClass","animateIn","setAttribute","animateOut","__unnotifyDiv","titleDiv","titleSpan","style","fontWeight","fontSize","innerText","__unnotifyTitle","closeButton","closeButtonClass","__unnotifyCloseButton","addEventListener","destroy","timeout","setTimeout","defaultTimeout","contentDiv","__unnotifyContent","__unnotifyDestroy","div_1","getElementById","getAttribute","contains","remove","parentNode","removeChild","__esModule","notificationCenterClassName","init","show","Unnotify","prototype"],"mappings":"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","file":"unnotify.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nexports.__esModule = true;\r\nvar notificationCenter;\r\nvar notificationCenterClassName = \"unnotify-center\";\r\nvar eachNotificationClassName = \"unnotify-panel\";\r\nvar notificationButtonClassName = \"unnotify-button\";\r\nvar defaultTimeout = 5000;\r\n/**Creates and appends the stylesheet to the document */\r\nfunction __unnotifyCreateStyleSheet(localNotificationCenterClassName, localEachNotificationClassName, notificationButtonClassName, side, clickable) {\r\n    if (side === undefined || side === null) {\r\n        side = \"right\";\r\n    }\r\n    else if (side === 'left') {\r\n        side = 'left';\r\n    }\r\n    else {\r\n        side = 'right';\r\n    }\r\n    var notificationCenterStyle = document.createElement(\"style\");\r\n    notificationCenterStyle.type = \"text/css\";\r\n    notificationCenterStyle.innerHTML = __unnotifyReturnClasses(localNotificationCenterClassName, localEachNotificationClassName, notificationButtonClassName, side, clickable);\r\n    document.getElementsByTagName('head')[0].appendChild(notificationCenterStyle);\r\n    // Create the notification center\r\n    notificationCenter = document.createElement(\"div\");\r\n    notificationCenter.classList.add(localNotificationCenterClassName);\r\n    // document.body.appendChild(notificationCenter);\r\n    document.body.insertBefore(notificationCenter, document.body.firstChild);\r\n}\r\n/**Returns the required classes */\r\nfunction __unnotifyReturnClasses(localNotificationCenterClassName, localEachNotificationClassName, localNotificationButtonClassName, side, clickable) {\r\n    var pointerEvents = \"initial\";\r\n    if (!clickable) {\r\n        pointerEvents = \"none\";\r\n    }\r\n    return \"\\n        .\" + localNotificationCenterClassName + \" {\\n            position: absolute;\\n            top: 20px;\\n            z-index: 25000;\\n            overflow-y: auto;\\n            overflow-x: hidden;\\n            pointer-events: \" + pointerEvents + \";\\n        }\\n\\n        .\" + localEachNotificationClassName + \" {\\n            padding: 10px;\\n            margin: 10px;\\n            border-radius: 5px;\\n            color: #fff;\\n            width: 350px;\\n            min-height: 40px;\\n            position: static;\\n            top: 30px;\\n            z-index: 25100;\\n            pointer-events: \" + pointerEvents + \";\\n        }\\n\\n        .\" + localNotificationButtonClassName + \" {\\n            float: right;\\n            position: relative;\\n            top: -7px;\\n            right: -10px;\\n            background-color: transparent;\\n            border: none;\\n            pointer-events: initial;\\n        }\\n\\n        .unnotify-success {\\n            background-color: rgba(27, 94, 32, 0.8);\\n        }\\n\\n        .unnotify-info {\\n            background-color: rgba(29, 121, 198, 0.8);\\n        }\\n\\n        .unnotify-warning {\\n            background-color: rgba(251, 114, 4, 0.8);\\n        }\\n\\n        .unnotify-danger {\\n            background-color: rgba(213, 0, 0, 0.8);\\n        }\\n\\n        /* Custom, iPhone Retina */ \\n        @media only screen and (min-width : 320px) {\\n            .\" + localNotificationCenterClassName + \" {\\n                margin: 0px 2px;\\n                padding: 0px 2px;\\n            }\\n\\n            .\" + localEachNotificationClassName + \" {\\n                width: 300px;\\n            }\\n        }\\n    \\n        /* Extra Small Devices, Phones */ \\n        @media only screen and (min-width : 480px) {\\n            .\" + localNotificationCenterClassName + \" {\\n                width: 360px;\\n                \" + side + \": 0px;\\n                padding: 10px;\\n                margin: 0px 20px;\\n            }\\n\\n            .\" + localEachNotificationClassName + \" {\\n                width: 100%;\\n            }\\n        }\\n    \\n        /* Small Devices, Tablets */\\n        @media only screen and (min-width : 768px) {\\n            .\" + localNotificationCenterClassName + \" {\\n                width: 360px;\\n                \" + side + \": 0px;\\n                padding: 10px;\\n                margin: 0px 20px;\\n            }\\n\\n            .\" + localEachNotificationClassName + \" {\\n                width: 100%;\\n            }\\n        }\\n    \";\r\n}\r\n/**Returns the Div Element that houses the notification */\r\nfunction __unnotifyDiv(eachNotificationClassName, options) {\r\n    var div = document.createElement(\"div\");\r\n    div.id = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n    div.classList.add(eachNotificationClassName);\r\n    if (options.type == \"success\" || options.type == \"info\" || options.type == \"danger\" || options.type == \"warning\") {\r\n        div.classList.add(\"unnotify-\" + options.type);\r\n    }\r\n    else if (typeof (options.customClass) != \"undefined\" || typeof (options.customClass) != null || options.customClass != \"\") {\r\n        div.classList.add(options.customClass);\r\n    }\r\n    if (typeof (options.animateIn) != \"undefined\") {\r\n        div.classList.add(\"animated\");\r\n        div.classList.add(options.animateIn);\r\n        div.setAttribute(\"data-animate-in\", options.animateIn);\r\n    }\r\n    else {\r\n        div.setAttribute(\"data-animate-in\", \"\");\r\n    }\r\n    if (typeof (options.animateOut) != \"undefined\") {\r\n        div.setAttribute(\"data-animate-out\", options.animateOut);\r\n    }\r\n    else {\r\n        div.setAttribute(\"data-animate-out\", \"\");\r\n    }\r\n    return div;\r\n}\r\n/**Returns the title div */\r\nfunction __unnotifyTitle(title) {\r\n    var titleDiv = document.createElement(\"div\");\r\n    var titleSpan = document.createElement(\"span\");\r\n    titleSpan.style.fontWeight = \"700\";\r\n    titleSpan.style.fontSize = \"1.6rem\";\r\n    titleSpan.innerText = title;\r\n    titleDiv.appendChild(titleSpan);\r\n    return titleDiv;\r\n}\r\n/**Returns the button which would close the notification */\r\nfunction __unnotifyCloseButton(closeButtonClass) {\r\n    var closeButton = document.createElement(\"button\");\r\n    closeButton.classList.add(closeButtonClass);\r\n    closeButton.innerText = \"x\";\r\n    return closeButton;\r\n}\r\n/**Returns the div that displays the content of the notification */\r\nfunction __unnotifyContent(content) {\r\n    var contentDiv = document.createElement(\"div\");\r\n    contentDiv.innerHTML = content;\r\n    return contentDiv;\r\n}\r\n/**Internal function to display the notification */\r\nfunction __unnotifyShow(eachNotificationClassName, notificationButtonClassName, title, content, options) {\r\n    var div = __unnotifyDiv(eachNotificationClassName, options);\r\n    var titleDiv = __unnotifyTitle(title);\r\n    var closeButton = __unnotifyCloseButton(notificationButtonClassName);\r\n    titleDiv.appendChild(closeButton);\r\n    closeButton.addEventListener('click', function () {\r\n        destroy(div.id);\r\n    });\r\n    // If timeout is 0, then don't autodestroy it\r\n    if (typeof (options.timeout) == \"undefined\" || typeof (options.timeout) == null || options.timeout < 0) {\r\n        setTimeout(function () {\r\n            destroy(div.id);\r\n        }, defaultTimeout);\r\n    }\r\n    else if (options.timeout > 0) {\r\n        setTimeout(function () {\r\n            destroy(div.id);\r\n        }, options.timeout);\r\n    }\r\n    var contentDiv = __unnotifyContent(content);\r\n    div.appendChild(titleDiv);\r\n    div.appendChild(contentDiv);\r\n    notificationCenter.appendChild(div);\r\n    return div.id;\r\n}\r\nfunction __unnotifyDestroy(id) {\r\n    try {\r\n        var div_1 = document.getElementById(id);\r\n        // Apply the animate-out class\r\n        var animateOut = div_1.getAttribute(\"data-animate-out\");\r\n        var animateIn = div_1.getAttribute(\"data-animate-in\");\r\n        if (animateOut.length != 0) {\r\n            if (!div_1.classList.contains(\"animated\")) {\r\n                div_1.classList.add(\"animated\");\r\n            }\r\n            if (animateIn.length != 0) {\r\n                div_1.classList.remove(animateIn);\r\n            }\r\n            div_1.classList.add(animateOut);\r\n            setTimeout(function () {\r\n                div_1.parentNode.removeChild(div_1);\r\n            }, 1000);\r\n        }\r\n        else {\r\n            div_1.parentNode.removeChild(div_1);\r\n        }\r\n    }\r\n    catch (e) { }\r\n}\r\n/**Initialises the notification module */\r\nfunction init(side, clickable) {\r\n    __unnotifyCreateStyleSheet(notificationCenterClassName, eachNotificationClassName, notificationButtonClassName, side, clickable);\r\n}\r\nexports.init = init;\r\n/**Displays the notification and returns the ID of the notification element. Title is a string, content can either be a string or HTML. */\r\nfunction show(title, content, options) {\r\n    return __unnotifyShow(eachNotificationClassName, notificationButtonClassName, title, content, options);\r\n}\r\nexports.show = show;\r\n/**Destroys the notification with the associated ID */\r\nfunction destroy(id) {\r\n    __unnotifyDestroy(id);\r\n}\r\nexports.destroy = destroy;\r\n/**Class that can display the notifications */\r\nvar Unnotify = /** @class */ (function () {\r\n    /**Initialises everything. Accepts the side, whose dafault is right. Possible values are 'right', 'left' */\r\n    function Unnotify(side, clickable) {\r\n        this.localNotificationCenterClassName = notificationCenterClassName + \"-\" + side;\r\n        this.localEachNotificationClassName = eachNotificationClassName + \"-\" + side;\r\n        // Create the CSS rules required for the notification center\r\n        __unnotifyCreateStyleSheet(this.localNotificationCenterClassName, this.localEachNotificationClassName, notificationButtonClassName, side, clickable);\r\n    }\r\n    /**Displays the notification and returns the ID of the notification element. Title is a string, content can either be a string or HTML. */\r\n    Unnotify.prototype.show = function (title, content, options) {\r\n        return __unnotifyShow(this.localEachNotificationClassName, notificationButtonClassName, title, content, options);\r\n    };\r\n    /**Destroys the notification with the associated ID */\r\n    Unnotify.prototype.destroy = function (id) {\r\n        __unnotifyDestroy(id);\r\n    };\r\n    return Unnotify;\r\n}());\r\nexports.Unnotify = Unnotify;\r\n"]}